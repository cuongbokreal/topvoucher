
.heading{margin: auto;}

#heading-img{margin: 0 auto; text-align:center; border-radius: 0.25rem!important;}



/*  ==== Raw === */

h1{font-size:22px;margin:0.3em 0}
h2{font-size:20px;margin:0.2em 0}
h3{font-size:1.17em;margin:1em 0}
h4{font-size:1em;margin:1.33em 0}
h5{font-size:0.83em;margin:1.67em 0}
h6{font-size:0.75em;margin:2.33em 0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
.post ol,ul{margin:5px 0 5px 35px;padding:0}
body{font-family:"Roboto",sans-serif;font-size:16px;margin:0;padding:0;color:#222;overflow-x:hidden;counter-reset:my-sec-counter;scroll-behavior: smooth}
svg.stardust-icon.stardust-icon-shopee._3T1K2M {
    height: 3.4375rem;
    width: 3.0625rem;
    color: #ee4d2d;
    margin: auto;
    display: block;
    fill: #ee4d2d;
}
.voucher{
    padding: 10px;
    background: #ffffff;
    border-radius: 5px;
    border: 3px #ee4d2e double;
}
.voucher div{
    text-align: center;
    font-size: 13px;
    font-weight: bold;
    margin-top: 5px;
}
span.badge.bg-danger {
    color: #ee4d2d;
    line-height: .875rem;
    border-radius: 1px;
    background: transparent!important;
    border: 1px solid #ee4d2d;
}
button.btn.btn-danger {
    background-color: rgb(238, 77, 45);
    color: rgb(255, 255, 255);
    border: 0;
    display: inline-block;
    vertical-align: middle;
        font-size: 13px;
    outline: none;
    border-radius: 0;
}



// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
  // Single container class with breakpoint max-widths
  .container,
  // 100% wide container at all breakpoints
  .container-fluid {
    @include make-container();
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if ($extend-breakpoint) {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          // Once the current breakpoint is reached, stop extending
          @if ($breakpoint == $name) {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}
